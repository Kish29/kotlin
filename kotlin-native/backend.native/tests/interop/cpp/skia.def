language = C++
compilerOpts = -std=c++17
plugin = org.jetbrains.kotlin.native.interop.skia
package = org.jetbrains.skiko.skia.native
headers = stdio.h
seaderFilter = 

---
// TODO: this one checks the syntactic aspect for now.
// To be updated for proper c++ destructor and
// kotlin garbage collection interaction.


template <typename T> class sk_sp {
public:
    sk_sp(T* obj) : data(obj) {}
    T* release() {
        return data;
    }
private:
    T* data;
};

template <typename T> sk_sp<T> sk_ref_sp(T* obj) {
    return sk_sp<T>(obj);
}

class SkValue {
    public:
        SkValue() {
            printf("SkValue()\n");
        };
        ~SkValue() {
            printf("~SkValue()\n");
        };
        int data;
        int refcount = 0;
        void setData(int val) {
            data = val;
        }
        void ref() {
            printf("ref\n");
            refcount ++;
        }
        void unref() {
            printf("unref\n");
            refcount --;
        }
};

class SkFoo {
public:
    SkFoo() {
        printf("SkFoo()\n");
    };

    ~SkFoo() {
        printf("~SkFoo()\n");
    };
    virtual sk_sp<SkValue> foo(SkValue *obj) {
        return sk_sp<SkValue>(obj);
    }

    virtual SkValue* bar(sk_sp<SkValue> obj) {
        return obj.release();
    }

    virtual SkValue* qux() {
        return new SkValue();
    }
};
